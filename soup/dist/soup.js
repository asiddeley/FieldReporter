{
 "ver": "20160825",
 "pageCount": 0,
 "picItem": "1",
 "rowCount": 0,
 "autoHeight":  function (el) { \r\n\t$(el).css('height', 'auto').css('height', el.scrollHeight + 5);\r\n} ,
 "distro":  function(){\r\n\t\tvar str=JSON.stringify(soup, replacer, ' ');\r\n\t\tstr=str.replace(/\/g,\"\");\r\n\t\tstr=str.replace(/FUNC999\"/g,\"\");\r\n\t\tieSaveFile(localPath('soup/dist/soup.js'), str);\r\n\t} ,
 "docName":  function() {\r\n\t//console.log('docName executed...');\r\n\tvar path=window.location.pathname; //eg c:/documents/folder/file.html\r\n\tvar name=path.substring(path.lastIndexOf('/')+1); //eg file.html\r\n\tname=name.replace(/%20/g,\" \");\r\n\treturn name.substring(0,name.lastIndexOf('.'));\r\n} ,
 "edit":  function(list, index, remove, ins){\r\n\t//similar to splice, which seems to be wonky in iexplorer\r\n\tif (Array.isArray(list)) {\r\n\t\tif (typeof ins=='undefined') ins=[];\r\n\t\tif (!Array.isArray(ins)) ins=[ins];\r\n\t\tif (typeof index != 'number') return list;\r\n\t\tif (typeof remove != 'number') return list;\r\n\t\tif (index <= 0){\r\n\t\t\treturn(ins.concat(list.slice(remove)));\r\n\t\t} else if(index < list.length){\t\t\t\r\n\t\t\treturn (list.slice(0,index).concat(ins).concat(list.slice(index+remove)));\t\t\r\n\t\t} else {\r\n\t\t\treturn (list.concat(ins));\t\t\r\n\t\t}\r\n\t}\r\n} ,
 "isJpg":  function(path){\r\n\tvar ext=path.substring(path.lastIndexOf('.')+1); \r\n\tif (ext.toUpperCase()==\"JPG\") return true;\r\n\telse return false;\r\n} ,
 "isPic":  function(path){\r\n\tvar r;\r\n\tvar ext=path.substring(path.lastIndexOf('.')+1); \r\n\tswitch(ext.toUpperCase()){\r\n\t\tcase \"JPG\":\tr=true;\tbreak;\r\n\t\tcase \"PNG\":\tr=true; break;\r\n\t\tdefault: r=false;\r\n\t}\r\n\treturn r;\r\n} ,
 "idfix":  function(el, suffix){\r\n\tvar id=$(el).attr('id');\r\n\t$(el).attr('id', id + suffix);\r\n\treturn soup; //to allow chaining\r\n} ,
 "idfixx":  function(el, prefix, suffix){\r\n\tvar id=$(el).attr('id');\r\n\t$(el).attr('id', prefix + id + suffix);\r\n\treturn soup; //to allow chaining\r\n} ,
 "localPath":  function(name){\r\n\tvar path=window.location.pathname; //eg c:/documents/folder/file.html\r\n\tvar dir=path.substring(1, path.lastIndexOf('/'))+\"/\" + name; //eg c:/documents/folder\r\n\tvar fn = dir.replace(/\\//g,\"\\\\\\\\\");\r\n\tfn = fn.replace(/%20/g,\" \");\r\n\treturn fn;\r\n} ,
 "localPicArray":  function(name){\r\n\tvar fe=localFileEnum();\r\n\tvar r=[];\r\n\tfor(; !fe.atEnd(); fe.moveNext()){\r\n\t\tif( isPic(fe.item().name)) r.push(fe.item().name);\r\n\t}\r\n\treturn r;\r\n} ,
 "localPicItem":  function(){return picItem;} ,
 "result":  function(id){\r\n\t//returns the result from soup widget of given id\r\n\t//console.log('get returns:'+key);\r\n\treturn $(id).cell('result')||$(id).pocket('result');\r\n} ,
 "base": "data/",
 "cache": null,
 "Doc":  function(name, valu){\r\n\tthis.name=(typeof name == 'undefined')?'unnamed':name.toString();\r\n\tthis.valu=(typeof valu == 'undefined')?'unvalued':valu.toString();\r\n} ,
 "file": "database.txt",
 "filename":  function(name){\r\n\tname=(!name)?\"database\":name;\r\n\tvar filename=(db.file)?localPath(db.base+db.file):localPath(db.base+name+'.txt');\r\n\treturn filename;\r\n} ,
 "mode": "ie",
 "load":  function(dataDoc){\r\n\t//argument may be a dataDoc object (or data record), with target id and default data or\r\n\t//a string representing a target cell id of the cell for which data is requested.\r\n\tif (typeof(dataDoc)=='string') dataDoc=new db.Doc(dataDoc);\r\n\t//var fn=soup.localPath(soup.dataBase);\r\n\tvar fn=db.filename(dataDoc['name']);\r\n\tif (db.cache === null) {\r\n\t\tswitch (db.mode){\r\n\t\t\tcase \"ax\":db.cache=axLoadFile(fn);break;\r\n\t\t\tcase \"ie\":db.cache=ieLoadFile(fn);break;\t\t\t\r\n\t\t\tdefault:db.cache=ieLoadFile(fn);\r\n\t\t}\r\n\t}\r\n\tif (db.cache === null) {\r\n\t\t//file not found so create file\r\n\t\tvar dbc={}; //collection\r\n\t\tdbc[dataDoc.name]=dataDoc;\r\n\t\tdb.cache=JSON.stringify(dbc);\r\n\t\t\r\n\t\tswitch (db.mode){\r\n\t\t\tcase \"ax\":axSaveFile(fn, db.cache);break;\r\n\t\t\tcase \"ie\":ieSaveFile(fn, db.cache);break;\t\t\t\r\n\t\t\tdefault:ieSaveFile(fn, db.cache);\r\n\t\t}\t\t\r\n\t\t//soup.ieSaveFile(fn, soup.dataCache);\r\n\t\t\r\n\t} else {\r\n\t\t//file found so extract name:value \r\n\t\tvar dbc=JSON.parse(db.cache);\r\n\t\tif (typeof(dbc[dataDoc.name])=='undefined'){\r\n\t\t\t//name:value not found so add\r\n\t\t\tdbc[dataDoc.name]=dataDoc;\r\n\t\t\tdb.cache=JSON.stringify(dbc);\r\n\t\t\tswitch (db.mode){\r\n\t\t\t\tcase \"ax\":axSaveFile(fn, db.cache);break;\r\n\t\t\t\tcase \"ie\":ieSaveFile(fn, db.cache);break;\t\t\t\r\n\t\t\t\tdefault:ieSaveFile(fn, db.cache);}\t\t\t\r\n\t\t\t//soup.ieSaveFile(fn, soup.dataCache);\r\n\t\t} \r\n\t\telse { dataDoc=dbc[dataDoc.name];}\r\n\t}\r\n\treturn dataDoc;\r\n} ,
 "save":  function(dataDoc){\r\n\t\r\n\tif (typeof(dataDoc)=='string') dataDoc=new db.Doc('unnamed', dataDoc);\r\n\t//Get text file contents which is a JSON of all cells\r\n\t//{name1:value1, name2:value2...}\r\n\t//var fn=soup.localPath(soup.dataBase);\r\n\tvar fn=db.filename(dataDoc.name);\r\n\tvar r=null; //return value represents success of data load/save\r\n\t\r\n\tif (db.cache === null){\r\n\t\t//cache null so load it\r\n\t\tdb.cache=ieLoadFile(fn);\r\n\t\t//soup.dataCache=soup.axLoadFile(fn);\r\n\t}\r\n\t\r\n\tif (db.cache === null){\r\n\t\t//cache still nulll means file not found so create file\r\n\t\tvar dbc={}; \r\n\t\t\r\n\t\t//dbc[dataDoc.name]=cellArg; ///cellArg not defined and I forget what it is, guessing is should be as follows\r\n\t\tdbc[dataDoc.name]=dataDoc; \r\n\t\t\r\n\t\tdb.cache=JSON.stringify(dbc);\r\n\t\tswitch (db.mode){\r\n\t\t\tcase \"ax\":r=axSaveFile(fn,db.cache);break;\r\n\t\t\tcase \"ie\":r=ieSaveFile(fn, db.cache);break;\t\t\t\r\n\t\t\tdefault:ieSaveFile(fn, db.cache);\r\n\t\t}\r\n\t\t//var r=ieSaveFile(fn, soup.dataCache);\r\n\t\t//var r=soup.axSaveFile(fn, soup.dataCache);\r\n\t} else {\r\n\t\t//file found so update record (change value of item identified by name)\r\n\t\tvar dbc=JSON.parse(db.cache);\r\n\t\tdbc[dataDoc.name]=dataDoc;\r\n\t\tdb.cache=JSON.stringify(dbc);\r\n\t\tswitch (db.mode){\r\n\t\t\tcase \"ax\":r=axSaveFile(fn, db.cache);break;\r\n\t\t\tcase \"ie\":r=ieSaveFile(fn, db.cache);break;\t\t\t\r\n\t\t\tdefault:r=ieSaveFile(fn, db.cache);\r\n\t\t}\r\n\t}\r\n\t//return success of ieSaveFile()\r\n\treturn r; \r\n} ,
 "ieLoadFile":  function(filePath){\r\n\t// copyright tiddly-wiki\r\n\ttry {\r\n\t\tvar fso = new ActiveXObject(\"Scripting.FileSystemObject\");\r\n\t\tvar file = fso.OpenTextFile(filePath, 1);\r\n\t\tvar content = file.ReadAll();\r\n\t\tfile.Close();\r\n\t} catch(ex) {\r\n\t\t//alert (\"loadfile failed \" + ex);\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\treturn content;\r\n} ,
 "ieSaveFile":  function(filePath, content){\r\n\t// copyright tiddly wiki\r\n\tieCreatePath(filePath);\r\n\ttry {\r\n\t\tvar fso = new ActiveXObject(\"Scripting.FileSystemObject\");\r\n\t} catch(ex) {\r\n\t\treturn null;\r\n\t}\r\n\tvar file = fso.OpenTextFile(filePath,2,-1,0);\r\n\tfile.Write(content);\r\n\tfile.Close();\r\n\treturn true;\r\n} ,
 "cell":  function(){\t$('[soup-cell]').cell(); return soup; } ,
 "foreach":  function(){$('[soup-cell]').cell(); return soup;} ,
 "pocket":  function(){\r\n\t$('[soup-pocket]').pocket();\r\n\treturn soup;\r\n} 
}